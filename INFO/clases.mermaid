classDiagram
    %% Core Classes
    class App {
        +config: array
        +db: DatabaseInterface
        +router: Router
        +request: Request
        +response: Response
        +__construct(config: array)
        +run()
    }

    class Router {
        -routes: array
        +get(path: string, callback: array)
        +post(path: string, callback: array)
        +resolve()
    }

    class Request {
        +getMethod(): string
        +getPath(): string
        +getBody(): array
        +getQuery(): array
    }

    class Response {
        +setStatusCode(code: int)
        +redirect(url: string)
        +json(data: mixed)
    }

    %% Database Classes
    class DatabaseInterface {
        <<interface>>
        +getConnection()
        +query(sql: string, params: array)
        +prepare(sql: string)
    }

    class MySQLDatabase {
        -connection: PDO
        -config: DatabaseConfiguration
        +__construct(config: DatabaseConfiguration)
        +getConnection(): PDO
        +query(sql: string, params: array)
        +prepare(sql: string)
    }

    class DatabaseConfiguration {
        +host: string
        +username: string
        +password: string
        +database: string
        +__construct(host: string, username: string, password: string, database: string)
    }

    %% Shop Classes
    class CartService {
        -db: DatabaseInterface
        -productRepository: ProductRepository
        +getItems(userEmail: string): array
        +addItem(userEmail: string, productId: int, quantity: int): bool
        +removeItem(userEmail: string, productId: int): bool
        +updateQuantity(userEmail: string, productId: int, quantity: int): bool
        +getTotal(userEmail: string): float
    }

    class ProductRepository {
        -db: DatabaseInterface
        +findAll(): array
        +findById(id: int): Product
        +findByCategory(category: string): array
        +updateStock(id: int, quantity: int): bool
    }

    class PurchaseService {
        -db: DatabaseInterface
        -cartService: CartService
        -productRepository: ProductRepository
        -purchaseRepository: PurchaseRepository
        +createPurchase(userEmail: string): bool
        +getUserPurchases(userEmail: string): array
        +getPurchaseDetails(purchaseId: int): array
    }

    class PurchaseRepository {
        -db: DatabaseInterface
        +save(purchase: Purchase): bool
        +findByUser(userEmail: string): array
        +findDetailsByPurchaseId(purchaseId: int): array
    }

    %% Models
    class Product {
        -id: int
        -name: string
        -description: string
        -price: float
        -stock: int
        -category: string
        +getId(): int
        +getName(): string
        +getDescription(): string
        +getPrice(): float
        +getStock(): int
        +getCategory(): string
        +hasStock(quantity: int): bool
    }

    class Purchase {
        -id: int
        -userEmail: string
        -date: DateTime
        -total: float
        -details: array
        +getId(): int
        +getUserEmail(): string
        +getDate(): DateTime
        +getTotal(): float
        +getDetails(): array
        +addDetail(detail: PurchaseDetail)
        +calculateTotal(): float
    }

    class PurchaseDetail {
        -productId: int
        -quantity: int
        -price: float
        +getProductId(): int
        +getQuantity(): int
        +getPrice(): float
        +getSubtotal(): float
    }

    %% Controllers
    class BaseController {
        -request: Request
        -response: Response
        -config: array
        +render(view: string, data: array): string
        +redirect(url: string)
        +json(data: mixed, statusCode: int)
    }

    class CartController {
        -cartService: CartService
        -productRepository: ProductRepository
        +index()
        +getItems()
        +addItem()
        +removeItem()
        +checkout()
    }

    class ProductController {
        -productRepository: ProductRepository
        +index()
        +detail(id: int)
        +byCategory(category: string)
        +api()
        +addToCart()
    }

    %% Auth Classes
    class AuthController {
        -userRepository: UserRepository
        +login()
        +register()
        +authenticate()
        +logout()
    }

    class UserRepository {
        -db: DatabaseInterface
        +findByEmail(email: string): User
        +save(user: User): bool
        +validateCredentials(email: string, password: string): bool
    }

    class User {
        -id: int
        -name: string
        -lastname: string
        -email: string
        -password: string
        -role: string
        +getId(): int
        +getName(): string
        +getEmail(): string
        +getRole(): string
        +validatePassword(password: string): bool
    }

    %% Relationships
    App --> Router
    App --> Request
    App --> Response
    App --> DatabaseInterface

    Router --> Request
    Router --> Response

    MySQLDatabase --> DatabaseInterface
    CartService --> DatabaseInterface
    CartService --> ProductRepository
    ProductRepository --> DatabaseInterface
    PurchaseService --> DatabaseInterface
    PurchaseService --> CartService
    PurchaseService --> ProductRepository
    PurchaseService --> PurchaseRepository
    PurchaseRepository --> DatabaseInterface

    BaseController --> Request
    BaseController --> Response
    CartController --> BaseController
    CartController --> CartService
    ProductController --> BaseController
    ProductController --> ProductRepository
    AuthController --> BaseController
    AuthController --> UserRepository

    Purchase --> PurchaseDetail
    UserRepository --> DatabaseInterface
    UserRepository --> User