Hola primero quiero enseñarte un poco de mi proyecto estoy transformando mi Backend(PHP) en SOLID

Ya aplicamos Las 3 partes Con exito pero ahora vamos a probar el funcionamiento de estas

Seguna Parte Sistema de productos

quiero que adaptes los siguientes Archivos para que todo funcione el Correctamente:

Carpeta PHP/

seccion productos
productos.php

Para mas Info sobre el Proyecto aqui tienes el Plan Trabajo:

## Análisis del funcionamiento actual

Tu proyecto es una aplicación web para una cafetería con estas funcionalidades:

1. Sistema de autenticación: Registro e inicio de sesión de usuarios.

2. Catálogo de productos: Visualización de productos por categorías.

3. Carrito de compras: Agregar/eliminar productos y finalizar compras.

Actualmente estás usando un enfoque orientado a objetos con las siguientes clases principales:

- Database: Implementa el patrón Singleton para la conexión a la base de datos.

- User: Gestiona autenticación y datos de usuarios.

- Product: Maneja los productos y categorías.

- Cart: Gestiona el carrito de compras.

- Purchase: Procesa las compras.

Aunque tienes una estructura de clases, hay algunos problemas:

- Alta cohesión entre clases (dependencias fuertes)

- Mezcla de responsabilidades (presentación y lógica de negocio)

- Falta de interfaces para abstraer implementaciones

- Código repetido en varios lugares

## Plan de refactorización aplicando SOLID

### 1. Parte 1: Conexión a Base de Datos

#### Principios a aplicar:

- S (Single Responsibility): Separar la conexión a BD de la manipulación de datos.

- O (Open/Closed): Permitir extensiones sin modificar el código existente.

- D (Dependency Inversion): Depender de abstracciones, no de implementaciones concretas.

#### Estructura propuesta:

```

/src

  /Core

    /Database

      DatabaseInterface.php

      MySQLDatabase.php

      DatabaseConfiguration.php

      DatabaseConnectionException.php

  /Config

    config.php

```

### 2. Parte 2: Sistema de Login

#### Principios a aplicar:

- S: Separar autenticación, manejo de sesiones y gestión de usuarios.

- I (Interface Segregation): Interfaces específicas para cada funcionalidad.

- D: Inyección de dependencias para los repositorios de usuarios.

#### Estructura propuesta:

```

/src

  /Auth

    /Interfaces

      AuthenticatorInterface.php

      SessionHandlerInterface.php

      UserRepositoryInterface.php

    /Services

      Authenticator.php

      SessionHandler.php

    /Repositories

      UserRepository.php

    /Models

      User.php

      UserRole.php

    /Exceptions

      AuthenticationException.php

```

### 3. Parte 3: Sistema de Compra y Carrito

#### Principios a aplicar:

- S: Separar la lógica del carrito, productos y compras.

- O: Permitir extensiones para diferentes métodos de pago, tipos de productos, etc.

- L (Liskov Substitution): Asegurar que las subclases sean usables donde se usan las clases base.

- I: Interfaces específicas para cada componente.

- D: Inyección de dependencias.

#### Estructura propuesta:

```

/src

  /Shop

    /Interfaces

      ProductRepositoryInterface.php

      CartInterface.php

      PurchaseServiceInterface.php

    /Models

      Product.php

      CartItem.php

      Purchase.php

      PurchaseDetail.php

    /Repositories

      ProductRepository.php

      PurchaseRepository.php

    /Services

      CartService.php

      PurchaseService.php

    /Exceptions

      ProductNotFoundException.php

      InsufficientStockException.php

      CheckoutException.php

```

## Plan detallado por etapas

### Primera parte: Refactorización de la conexión a BD

Vamos a transformar primero la capa de conexión a base de datos siguiendo el principio de responsabilidad única y la inversión de dependencias:

1. Crear una interfaz `DatabaseInterface` que defina los métodos básicos de conexión.
2. Crear una implementación concreta `MySQLDatabase` que implemente esta interfaz.
3. Separar la configuración en una clase `DatabaseConfiguration`.
4. Crear excepciones personalizadas para los errores de conexión.
5. Implementar un sistema de inyección de dependencias simple.

Este será nuestro punto de partida para luego refactorizar el resto del sistema.

seccion compra
finalizar_compra.php

seccion carro
carrito.php
eliminar_carro.php
agregar_carro.php
obtener_carro.php

