# Plan de Trabajo Detallado para Implementar MVC en Cafe-VT

## Fase 1: Preparación y Estructura Básica

### Estructura de directorios después de completar esta fase:

```
Cafe-VT/ (directorio raíz existente)
├── app/
│   ├── controllers/
│   ├── models/
│   ├── views/
│   │   └── layouts/
│   ├── core/
│   └── config/
│       └── database.php
├── public/
│   ├── index.php
│   ├── css/
│   └── .htaccess
├── CSS/ (carpeta original - se mantiene temporalmente)
├── PHP/ (carpeta original - se mantiene temporalmente)
├── src/ (carpeta original - se mantiene y usará)
└── vendor/ (carpeta original - se mantiene)
```

### Justificación de archivos clave:

- **app/**: Separa el código de la aplicación del código público, mejorando seguridad.
  - **controllers/**: Contendrá clases que manejan las solicitudes y ejecutan lógica de negocio.
  - **models/**: Interactuará con la base de datos y define la estructura de datos.
  - **views/**: Contiene archivos que definen cómo se presentará la información al usuario.
  - **core/**: Contiene componentes fundamentales como router, autoloader, etc.
  - **config/database.php**: Centraliza la configuración de la base de datos para facilitar su mantenimiento.

- **public/**: Único directorio accesible directamente desde el navegador.
  - **index.php**: "Front controller" que procesa todas las solicitudes.
  - **.htaccess**: Redirige todas las solicitudes a index.php para control centralizado.

## Fase 2: Implementación del Core MVC

### Estructura después de completar esta fase:

```
Cafe-VT/
├── app/
│   ├── controllers/
│   │   └── BaseController.php
│   ├── models/
│   ├── views/
│   │   ├── layouts/
│   │   │   └── main.php
│   │   └── errors/
│   │       └── 404.php
│   ├── core/
│   │   ├── Router.php
│   │   ├── Request.php
│   │   ├── Response.php
│   │   └── App.php
│   └── config/
│       ├── database.php
│       └── config.php
├── public/
│   ├── index.php
│   ├── css/
│   └── .htaccess
├── [carpetas originales se mantienen]
```

### Justificación de archivos clave:

- **BaseController.php**: Define métodos comunes para todos los controladores, facilitando la reutilización de código.

- **Router.php**: Maneja la lógica de enrutamiento, determinando qué controlador y método ejecutar según la URL solicitada.

- **Request.php**: Encapsula datos de la solicitud HTTP (GET, POST, cookies, etc.), facilitando el acceso a estos datos.

- **Response.php**: Maneja la generación de respuestas HTTP, incluyendo códigos de estado y cabeceras.

- **App.php**: Inicializa la aplicación, conectando los componentes principales (router, controladores, etc.).

- **main.php**: Layout principal que proporciona la estructura HTML compartida entre todas las páginas.

- **404.php**: Vista para página de error cuando no se encuentra una ruta.

## Fase 3: Primer Módulo Funcional - Página de Inicio

### Estructura después de completar esta fase:

```
Cafe-VT/
├── app/
│   ├── controllers/
│   │   ├── BaseController.php
│   │   └── PageController.php
│   ├── models/
│   ├── views/
│   │   ├── layouts/
│   │   │   └── main.php
│   │   ├── pages/
│   │   │   └── home.php
│   │   └── errors/
│   │       └── 404.php
│   ├── [carpetas core y config igual que antes]
├── public/
│   ├── index.php
│   ├── css/
│   │   ├── index.css (copiado de CSS/index.css)
│   │   └── main.css (nuevo archivo para estilos compartidos)
│   └── .htaccess
├── [carpetas originales se mantienen]
```

### Justificación de archivos clave:

- **PageController.php**: Maneja páginas estáticas o semi-estáticas como la página de inicio, servicios, y ayuda. Reduce la necesidad de crear controladores específicos para páginas simples.

- **views/pages/home.php**: Contiene solo el contenido específico de la página de inicio, separado del layout común.

- **public/css/main.css**: Estilos compartidos por todas las páginas, mejorando la consistencia y reduciendo duplicación.

## Fase 4: Implementación de Autenticación

### Estructura después de completar esta fase:

```
Cafe-VT/
├── app/
│   ├── controllers/
│   │   ├── BaseController.php
│   │   ├── PageController.php
│   │   └── AuthController.php
│   ├── middleware/
│   │   ├── Middleware.php
│   │   └── AuthMiddleware.php
│   ├── views/
│   │   ├── layouts/
│   │   │   └── main.php
│   │   ├── pages/
│   │   │   └── home.php
│   │   ├── auth/
│   │   │   ├── login.php
│   │   │   └── register.php
│   │   └── errors/
│   │       └── 404.php
│   ├── [demás carpetas igual que antes]
├── public/
│   ├── [igual que antes]
│   ├── css/
│   │   ├── [archivos anteriores]
│   │   ├── login.css (copiado de CSS/login.css)
│   │   └── registro.css (copiado de CSS/registro.css)
├── [carpetas originales se mantienen]
```

### Justificación de archivos clave:

- **AuthController.php**: Maneja la lógica de autenticación (login, registro, logout), interactuando con servicios existentes en `src/Auth/`.

- **middleware/**: Nueva carpeta para componentes que se ejecutan antes de los controladores, validando requisitos como autenticación.
  - **Middleware.php**: Clase base para todos los middleware.
  - **AuthMiddleware.php**: Verifica si el usuario está autenticado antes de permitir acceso a rutas protegidas.

- **views/auth/**: Contiene formularios de login y registro, separados de la lógica de negocio.

## Fase 5: Migración de Productos

### Estructura después de completar esta fase:

```
Cafe-VT/
├── app/
│   ├── controllers/
│   │   ├── [controladores anteriores]
│   │   └── ProductController.php
│   ├── models/
│   │   └── ProductModel.php (opcional, si se necesita adicional a src/)
│   ├── views/
│   │   ├── [vistas anteriores]
│   │   └── products/
│   │       ├── index.php
│   │       └── detail.php
│   ├── [demás carpetas igual que antes]
├── public/
│   ├── [igual que antes]
│   ├── css/
│   │   ├── [archivos anteriores]
│   │   └── productos.css (copiado de CSS/productos.css)
│   ├── js/
│   │   └── products.js (nuevo, para interactividad de productos)
├── [carpetas originales se mantienen]
```

### Justificación de archivos clave:

- **ProductController.php**: Maneja listado, búsqueda y detalle de productos, utilizando repositorios existentes en `src/Shop/Repositories/`.

- **ProductModel.php**: Opcional, si se necesita extender la funcionalidad de los modelos existentes en `src/Shop/Models/`.

- **views/products/**: Contiene vistas para visualizar productos.
  - **index.php**: Vista para listado de productos con filtros.
  - **detail.php**: Vista detallada de un producto individual.

- **public/js/products.js**: Opcional, para funcionalidades dinámicas como filtrado AJAX, zoom de imágenes, etc.

## Fase 6: Implementación del Carrito

### Estructura después de completar esta fase:

```
Cafe-VT/
├── app/
│   ├── controllers/
│   │   ├── [controladores anteriores]
│   │   └── CartController.php
│   ├── views/
│   │   ├── [vistas anteriores]
│   │   └── cart/
│   │       ├── index.php
│   │       └── checkout.php
│   ├── [demás carpetas igual que antes]
├── public/
│   ├── [igual que antes]
│   ├── css/
│   │   ├── [archivos anteriores]
│   │   └── carro.css (copiado de CSS/carro.css)
│   ├── js/
│   │   ├── [archivos anteriores]
│   │   └── cart.js (nuevo, para funcionalidad del carrito)
├── [carpetas originales se mantienen]
```

### Justificación de archivos clave:

- **CartController.php**: Gestiona todas las operaciones del carrito (agregar, eliminar, actualizar, mostrar), utilizando servicios de `src/Shop/Services/`.

- **views/cart/**: Contiene vistas para el carrito.
  - **index.php**: Muestra el contenido actual del carrito.
  - **checkout.php**: Formulario para finalizar la compra.

- **public/js/cart.js**: Maneja operaciones AJAX para agregar/eliminar productos del carrito sin recargar la página.

## Fase 7: Dashboard y Servicios Adicionales

### Estructura después de completar esta fase:

```
Cafe-VT/
├── app/
│   ├── controllers/
│   │   ├── [controladores anteriores]
│   │   └── DashboardController.php
│   ├── views/
│   │   ├── [vistas anteriores]
│   │   ├── dashboard/
│   │   │   ├── index.php
│   │   │   ├── profile.php
│   │   │   └── orders.php
│   │   └── pages/
│   │       ├── home.php
│   │       ├── services.php
│   │       └── help.php
│   ├── [demás carpetas igual que antes]
├── public/
│   ├── [igual que antes]
│   ├── css/
│   │   ├── [archivos anteriores]
│   │   ├── dashboard.css (copiado de CSS/dashboard.css)
│   │   ├── servicios.css (copiado de CSS/servicios.css)
│   │   └── ayuda.css (copiado de CSS/ayuda.css)
├── [carpetas originales se mantienen]
```

### Justificación de archivos clave:

- **DashboardController.php**: Maneja el panel de usuario, mostrando información personalizada como historial de compras, preferencias, etc.

- **views/dashboard/**: Contiene vistas para el panel de usuario.
  - **index.php**: Vista principal del dashboard con resumen.
  - **profile.php**: Vista para editar perfil.
  - **orders.php**: Vista para historial de pedidos.

- **views/pages/**: Se completan las páginas estáticas.
  - **services.php**: Migrada de Servicios.html.
  - **help.php**: Migrada de Ayuda.html.

## Fase 8: Limpieza y Optimización

### Estructura final del proyecto:

```
Cafe-VT/
├── app/
│   ├── controllers/
│   │   ├── BaseController.php
│   │   ├── PageController.php
│   │   ├── AuthController.php
│   │   ├── ProductController.php
│   │   ├── CartController.php
│   │   └── DashboardController.php
│   ├── middleware/
│   │   ├── Middleware.php
│   │   ├── AuthMiddleware.php
│   │   └── AdminMiddleware.php (si es necesario)
│   ├── models/ (solo si se necesitan adicionales a src/)
│   ├── views/
│   │   ├── layouts/
│   │   │   └── main.php
│   │   ├── pages/
│   │   │   ├── home.php
│   │   │   ├── services.php
│   │   │   └── help.php
│   │   ├── auth/
│   │   │   ├── login.php
│   │   │   └── register.php
│   │   ├── products/
│   │   │   ├── index.php
│   │   │   └── detail.php
│   │   ├── cart/
│   │   │   ├── index.php
│   │   │   └── checkout.php
│   │   ├── dashboard/
│   │   │   ├── index.php
│   │   │   ├── profile.php
│   │   │   └── orders.php
│   │   └── errors/
│   │       ├── 404.php
│   │       └── 500.php
│   ├── core/
│   │   ├── Router.php
│   │   ├── Request.php
│   │   ├── Response.php
│   │   ├── App.php
│   │   └── helpers.php (funciones auxiliares)
│   └── config/
│       ├── database.php
│       └── config.php
├── public/
│   ├── index.php
│   ├── css/
│   │   ├── main.css
│   │   ├── index.css
│   │   ├── login.css
│   │   ├── registro.css
│   │   ├── productos.css
│   │   ├── carro.css
│   │   ├── dashboard.css
│   │   ├── servicios.css
│   │   └── ayuda.css
│   ├── js/
│   │   ├── main.js
│   │   ├── products.js
│   │   ├── cart.js
│   │   └── dashboard.js
│   └── .htaccess
├── src/ (se mantiene y utiliza)
├── vendor/ (se mantiene)
├── composer.json (se actualiza para autoloading)
└── README.md (actualizado con información de la nueva estructura)
```

### Archivos eliminados:
- Archivos HTML originales: `index.php`, `login.html`, `registro.html`, `Ayuda.html`, `Servicios.html`
- Archivos PHP en `PHP/`: todos los archivos una vez migrados
- Carpeta `CSS/` original (después de migrar todos los estilos a `public/css/`)

### Justificación de la estructura final:

1. **Separación clara de responsabilidades**:
   - Controladores: Gestionan solicitudes y coordinan el flujo de datos
   - Vistas: Presentan la información al usuario
   - Modelos/Servicios: Encapsulan la lógica de negocio y acceso a datos

2. **Seguridad mejorada**:
   - Solo el directorio `public` es accesible desde la web
   - Archivos críticos como configuraciones están fuera del alcance público

3. **Mantenibilidad**:
   - Estructura organizada por funcionalidad
   - Reutilización de código a través de clases base
   - Fácil ubicación de archivos relacionados

4. **Compatibilidad con código existente**:
   - Se mantiene y utiliza la carpeta `src/` con repositorios y servicios
   - No se duplica funcionalidad ya implementada

5. **Escalabilidad**:
   - Fácil adición de nuevos controladores, vistas y funcionalidades
   - Sistema de middleware para funcionalidades transversales

¿Te gustaría que profundice en algún aspecto específico de esta estructura o necesitas aclaraciones sobre alguna parte del plan de trabajo?